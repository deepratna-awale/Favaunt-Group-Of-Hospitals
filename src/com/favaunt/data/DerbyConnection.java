package com.favaunt.data;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DerbyConnection {

    private static final Logger logger = Logger.getLogger(DerbyConnection.class.getName());

    private static Connection connection;

    static {
        try {
            //initialize db drivers
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            //connect to db
            connection = DriverManager.getConnection("jdbc:derby://localhost:1527/db_base", "root", "toor");
        } catch (ClassNotFoundException | SQLException exception) {
            logger.log(Level.SEVERE, "Unable to create Connection", exception);
        }
    }

    public static Connection getConnection() {
        return connection;
    }

    public static Statement getStatement() throws SQLException {
        return connection.createStatement();
    }

    public static Statement getStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return connection.createStatement(resultSetType, resultSetConcurrency);
    }

    public static Statement getStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        return connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public static PreparedStatement getPreparedStatement(final String query) throws SQLException {
        return connection.prepareStatement(query);
    }

    public static PreparedStatement getPreparedStatement(final String query, final String[] columnNames) throws SQLException {
        return connection.prepareStatement(query, columnNames);
    }

    public static PreparedStatement getPreparedStatement(final String query, final int[] columnIndices) throws SQLException {
        return connection.prepareStatement(query, columnIndices);
    }

    public static PreparedStatement getPreparedStatement(final String query, final int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(query, autoGeneratedKeys);
    }

    public static PreparedStatement getPreparedStatement(final String query, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        return connection.prepareStatement(query, resultSetType, resultSetConcurrency);
    }

    public static PreparedStatement getPreparedStatement(final String query, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        return connection.prepareStatement(query, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

}
